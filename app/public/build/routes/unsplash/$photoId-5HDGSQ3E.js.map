{
  "version": 3,
  "sources": ["../../../../app/routes/unsplash/$photoId.tsx"],
  "sourcesContent": ["import { Link, useLoaderData } from \"@remix-run/react\";\nimport type { LoaderFunction } from \"@remix-run/server-runtime\";\nimport { json } from \"@remix-run/server-runtime\";\nimport { fetchFromUnsplashAndRunThroughSqip } from \"../../services/sqip\";\n\ninterface KonverteringData {\n  originalStorrelse: string;\n  nyStorrelse: string;\n  prosentSpart: string;\n  nedlastetBildePath: string;\n  resultatSvgPath: string;\n}\n\nexport const loader: LoaderFunction = async ({ params }) => {\n  const photoId = params.photoId;\n\n  if (!photoId) {\n    throw json({ message: \"Unsplash id er tom\" }, 409);\n  }\n\n  const resultatFraKonvertering = await fetchFromUnsplashAndRunThroughSqip(\n    photoId\n  );\n  return json({ result: resultatFraKonvertering }, 200);\n};\n\nexport default function UnsplashUrl() {\n  const data = useLoaderData<{ result: KonverteringData }>();\n  return (\n    <>\n      <div className=\"grid grid-cols-2 gap-20 text-center\">\n        <div>\n          <h1 className=\"font-bold\">Originalbilde</h1>\n          <p>\n            Original st\u00F8rrelse p\u00E5 bilde:{\" \"}\n            {parseInt(data.result.originalStorrelse).toFixed(2)} MB\n          </p>\n          <img src={`/${data.result.nedlastetBildePath}`} alt=\"Originalbilde\" />\n        </div>\n        <div>\n          <h1 className=\"font-bold\">SVG etter konvertering</h1>\n          <p>Ny st\u00F8rrelse p\u00E5 bilde: {data.result.nyStorrelse} MB</p>\n          <img\n            src={`/${data.result.resultatSvgPath}`}\n            alt=\"SVG av originalbilde\"\n          />\n        </div>\n      </div>\n      <div className=\"m-5\">\n        <p className=\"text-2xl\">Du sparer {data.result.prosentSpart} %</p>\n      </div>\n\n      <Link className=\"rounded-md bg-accent py-5 px-10\" to=\"/search\">\n        Nytt s\u00F8k\n      </Link>\n    </>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;AAAA;AA0Be,SAAR,cAA+B;AACpC,QAAM,OAAO,cAA4C;AACzD,SACE;AAAA,IACE;AAAA,yDAAC;AAAA,QAAI,WAAU;AAAA,QACb;AAAA,6DAAC;AAAA,YACC;AAAA,iEAAC;AAAA,gBAAG,WAAU;AAAA,gBAAY;AAAA,iBAA1B;AAAA;AAAA;AAAA;AAAA,qBAAuC;AAAA,cACvC,mDAAC;AAAA,gBAAE;AAAA;AAAA,kBAC4B;AAAA,kBAC5B,SAAS,KAAK,OAAO,iBAAiB,EAAE,QAAQ,CAAC;AAAA,kBAAE;AAAA;AAAA,iBAFtD;AAAA;AAAA;AAAA;AAAA,qBAGA;AAAA,cACA,mDAAC;AAAA,gBAAI,KAAK,IAAI,KAAK,OAAO;AAAA,gBAAsB,KAAI;AAAA,iBAApD;AAAA;AAAA;AAAA;AAAA,qBAAoE;AAAA;AAAA,aANtE;AAAA;AAAA;AAAA;AAAA,iBAOA;AAAA,UACA,mDAAC;AAAA,YACC;AAAA,iEAAC;AAAA,gBAAG,WAAU;AAAA,gBAAY;AAAA,iBAA1B;AAAA;AAAA;AAAA;AAAA,qBAAgD;AAAA,cAChD,mDAAC;AAAA,gBAAE;AAAA;AAAA,kBAAwB,KAAK,OAAO;AAAA,kBAAY;AAAA;AAAA,iBAAnD;AAAA;AAAA;AAAA;AAAA,qBAAsD;AAAA,cACtD,mDAAC;AAAA,gBACC,KAAK,IAAI,KAAK,OAAO;AAAA,gBACrB,KAAI;AAAA,iBAFN;AAAA;AAAA;AAAA;AAAA,qBAGA;AAAA;AAAA,aANF;AAAA;AAAA;AAAA;AAAA,iBAOA;AAAA;AAAA,SAhBF;AAAA;AAAA;AAAA;AAAA,aAiBA;AAAA,MACA,mDAAC;AAAA,QAAI,WAAU;AAAA,QACb,6DAAC;AAAA,UAAE,WAAU;AAAA,UAAW;AAAA;AAAA,YAAW,KAAK,OAAO;AAAA,YAAa;AAAA;AAAA,WAA5D;AAAA;AAAA;AAAA;AAAA,eAA8D;AAAA,SADhE;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MAEA,mDAAC;AAAA,QAAK,WAAU;AAAA,QAAkC,IAAG;AAAA,QAAU;AAAA,SAA/D;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA;AAAA,KAzBF;AAAA;AAAA;AAAA;AAAA,SA0BA;AAEJ;",
  "names": []
}
