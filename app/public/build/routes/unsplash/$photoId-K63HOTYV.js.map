{
  "version": 3,
  "sources": ["../../../../app/routes/unsplash/$photoId.tsx"],
  "sourcesContent": ["import type { Konvertering } from \"@prisma/client\";\nimport { Link, useLoaderData } from \"@remix-run/react\";\nimport type { LoaderFunction } from \"@remix-run/server-runtime\";\nimport { json } from \"@remix-run/server-runtime\";\nimport { PhotoAttribution } from \"../../components/PhotoAttribution\";\nimport type { Metadata } from \"../../services/sqip\";\nimport { fetchFromUnsplashAndRunThroughSqip } from \"../../services/sqip\";\n\nexport const loader: LoaderFunction = async ({ params }) => {\n  const photoId = params.photoId;\n\n  if (!photoId) {\n    throw json({ message: \"Unsplash id er tom\" }, 409);\n  }\n\n  const alternativeImages = [100, 300, 500, 1000];\n\n  const result: Konvertering[] = [];\n  await Promise.all(\n    alternativeImages.map(async (numOfPrimitive) => {\n      const resultatFraKonvertering = await fetchFromUnsplashAndRunThroughSqip(\n        photoId,\n        numOfPrimitive\n      );\n      result.push(...resultatFraKonvertering);\n    })\n  );\n\n  return json(\n    {\n      result: result.sort(\n        (a, b) => a.numberOfPrimitives - b.numberOfPrimitives\n      ),\n    },\n    200\n  );\n};\n\nexport default function UnsplashUrl() {\n  const data = useLoaderData<{ result: Konvertering[] }>();\n  const metadata = JSON.parse(data.result[0].metadata) as Metadata;\n  const unsplash = metadata.unsplashResponse?.response;\n\n  return (\n    <div className=\"flex flex-col items-center\">\n      <h1 className=\"font-bold\">Originalbilde</h1>\n      <p>\n        Original st\u00F8rrelse p\u00E5 bilde:{\" \"}\n        {parseInt(metadata.originalStorrelse).toFixed(2)} MB\n      </p>\n      <img\n        className=\"w-2/5\"\n        src={`/${metadata.nedlastetBildePath}`}\n        alt=\"Originalbilde\"\n      />\n      <p>\n        {unsplash?.exif.aperture} / {unsplash?.exif.exposure_time} -{\" \"}\n        {unsplash?.exif.model}\n      </p>\n      <PhotoAttribution\n        attributionLink={unsplash?.links.html ?? \"\"}\n        photoBy={unsplash?.user.name ?? \"\"}\n        userProfileLink={unsplash?.user.links.html ?? \"\"}\n      />\n      <div>\n        <h1 className=\"text-center font-bold\">SVG etter konvertering</h1>\n\n        <div className=\"grid grid-cols-4 gap-10\">\n          {data.result.map((result) => {\n            const metadata = JSON.parse(result.metadata) as Metadata;\n            return (\n              <div className=\"mb-10\" key={result.id}>\n                <p>Ny st\u00F8rrelse p\u00E5 bilde: {metadata.nyStorrelse} MB</p>\n                <img\n                  src={`/${metadata.resultatSvgPath}`}\n                  alt=\"SVG av originalbilde\"\n                />\n                <p>Antall primitives: {result.numberOfPrimitives}</p>\n                <p>Du sparer {metadata.prosentSpart} %</p>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      <Link className=\"rounded-md bg-accent py-5 px-10\" to=\"/search\">\n        Nytt s\u00F8k\n      </Link>\n    </div>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;AAAA;AAsCe,SAAR,cAA+B;AAtCtC;AAuCE,QAAM,OAAO,cAA0C;AACvD,QAAM,WAAW,KAAK,MAAM,KAAK,OAAO,GAAG,QAAQ;AACnD,QAAM,YAAW,cAAS,qBAAT,mBAA2B;AAE5C,SACE,mDAAC;AAAA,IAAI,WAAU;AAAA,IACb;AAAA,yDAAC;AAAA,QAAG,WAAU;AAAA,QAAY;AAAA,SAA1B;AAAA;AAAA;AAAA;AAAA,aAAuC;AAAA,MACvC,mDAAC;AAAA,QAAE;AAAA;AAAA,UAC4B;AAAA,UAC5B,SAAS,SAAS,iBAAiB,EAAE,QAAQ,CAAC;AAAA,UAAE;AAAA;AAAA,SAFnD;AAAA;AAAA;AAAA;AAAA,aAGA;AAAA,MACA,mDAAC;AAAA,QACC,WAAU;AAAA,QACV,KAAK,IAAI,SAAS;AAAA,QAClB,KAAI;AAAA,SAHN;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA,MACA,mDAAC;AAAA,QACE;AAAA,+CAAU,KAAK;AAAA,UAAS;AAAA,UAAI,qCAAU,KAAK;AAAA,UAAc;AAAA,UAAG;AAAA,UAC5D,qCAAU,KAAK;AAAA;AAAA,SAFlB;AAAA;AAAA;AAAA;AAAA,aAGA;AAAA,MACA,mDAAC;AAAA,QACC,kBAAiB,0CAAU,MAAM,SAAhB,YAAwB;AAAA,QACzC,UAAS,0CAAU,KAAK,SAAf,YAAuB;AAAA,QAChC,kBAAiB,0CAAU,KAAK,MAAM,SAArB,YAA6B;AAAA,SAHhD;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA,MACA,mDAAC;AAAA,QACC;AAAA,6DAAC;AAAA,YAAG,WAAU;AAAA,YAAwB;AAAA,aAAtC;AAAA;AAAA;AAAA;AAAA,iBAA4D;AAAA,UAE5D,mDAAC;AAAA,YAAI,WAAU;AAAA,YACZ,eAAK,OAAO,IAAI,CAAC,WAAW;AAC3B,oBAAMA,YAAW,KAAK,MAAM,OAAO,QAAQ;AAC3C,qBACE,mDAAC;AAAA,gBAAI,WAAU;AAAA,gBACb;AAAA,qEAAC;AAAA,oBAAE;AAAA;AAAA,sBAAwBA,UAAS;AAAA,sBAAY;AAAA;AAAA,qBAAhD;AAAA;AAAA;AAAA;AAAA,yBAAmD;AAAA,kBACnD,mDAAC;AAAA,oBACC,KAAK,IAAIA,UAAS;AAAA,oBAClB,KAAI;AAAA,qBAFN;AAAA;AAAA;AAAA;AAAA,yBAGA;AAAA,kBACA,mDAAC;AAAA,oBAAE;AAAA;AAAA,sBAAoB,OAAO;AAAA;AAAA,qBAA9B;AAAA;AAAA;AAAA;AAAA,yBAAiD;AAAA,kBACjD,mDAAC;AAAA,oBAAE;AAAA;AAAA,sBAAWA,UAAS;AAAA,sBAAa;AAAA;AAAA,qBAApC;AAAA;AAAA;AAAA;AAAA,yBAAsC;AAAA;AAAA,iBAPZ,OAAO,IAAnC;AAAA;AAAA;AAAA;AAAA,qBAQA;AAAA,YAEJ,CAAC;AAAA,aAdH;AAAA;AAAA;AAAA;AAAA,iBAeA;AAAA;AAAA,SAlBF;AAAA;AAAA;AAAA;AAAA,aAmBA;AAAA,MAEA,mDAAC;AAAA,QAAK,WAAU;AAAA,QAAkC,IAAG;AAAA,QAAU;AAAA,SAA/D;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA;AAAA,KA3CF;AAAA;AAAA;AAAA;AAAA,SA4CA;AAEJ;",
  "names": ["metadata"]
}
